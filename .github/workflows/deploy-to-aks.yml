name: Deploy Next.js App to AKS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  ACR_NAME: acrmsassignment2025
  ACR_LOGIN_SERVER: acrmsassignment2025.azurecr.io
  AKS_CLUSTER_NAME: aks-demo-cluster
  AKS_RESOURCE_GROUP: rg-acr-demo
  APP_NAME: nextjsbasicapp  # ← Updated app name ! !

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 🛡️ Microsoft Security DevOps
        uses: microsoft/security-devops-action@v1.6.0
        with:
          categories: 'secrets,code,dependencies'


      - name: 🐳 Build Docker image
        run: docker build -t ${{ env.APP_NAME }}:latest .

      - name: 🛡️ Scan container vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.APP_NAME }}:latest'
          format: 'table'

  deploy:
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: nextjsbasicapp
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Login to Azure
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: 🐳 Build and push to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }} .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}

      - name: 🔧 Install kubelogin
        run: |
          # Download and install kubelogin
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.32/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          chmod +x /usr/local/bin/kubelogin

      - name: 🎯 Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --admin --overwrite-existing

      - name: 🚀 Deploy to AKS
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace nextjsbasicapp --dry-run=client -o yaml | kubectl apply -f -
          
          # Create ingress-nginx namespace if it doesn't exist
          kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -
          
          # Update deployment with image tag
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml
          
          # Apply all configurations
          kubectl apply -f k8s/ --validate=false
          
          # Check NGINX Ingress Controller namespace and labels
          echo "🔍 Checking NGINX Ingress Controller..."
          kubectl get pods -n ingress-nginx
          kubectl get svc -n ingress-nginx
          
          # Clean up any duplicate LoadBalancer in wrong namespace
          if kubectl get svc nginx-ingress-loadbalancer -n nginx-ingress >/dev/null 2>&1; then
            echo "🧹 Removing duplicate LoadBalancer from wrong namespace..."
            kubectl delete svc nginx-ingress-loadbalancer -n nginx-ingress
          fi
          
          # Apply NGINX LoadBalancer only if it doesn't exist (prevent duplicates)
          if ! kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx >/dev/null 2>&1; then
            echo "🔧 Creating NGINX LoadBalancer service..."
            kubectl apply -f k8s/nginx-loadbalancer.yaml
          else
            echo "✅ NGINX LoadBalancer service already exists, skipping creation"
            kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx
          fi
          
          # Check rollout status in the specific namespace
          kubectl rollout status deployment/${{ env.APP_NAME }} -n nextjsbasicapp
          
          # Verify ingress deployment
          kubectl get ingress -n nextjsbasicapp
          
          # Verify LoadBalancer has endpoints
          echo "🔍 Checking LoadBalancer endpoints..."
          kubectl get endpoints nginx-ingress-loadbalancer -n ingress-nginx
          
          # Display stable LoadBalancer IP
          echo "🌐 LoadBalancer Service Details:"
          kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx
          
          # Extract and display the external IP for easy reference
          EXTERNAL_IP=$(kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "🎯 Your stable LoadBalancer IP: $EXTERNAL_IP"
            echo "📝 Update your hosts file with: $EXTERNAL_IP nextjsbasicapp.local"
            echo "🌐 Access your app at: http://nextjsbasicapp.local or http://$EXTERNAL_IP"
          fi
          
          echo "✅ Deployment completed successfully!"
