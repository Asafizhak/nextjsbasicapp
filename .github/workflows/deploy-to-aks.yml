name: Deploy Next.js App to AKS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  ACR_NAME: acrmsassignment2025
  ACR_LOGIN_SERVER: acrmsassignment2025.azurecr.io
  AKS_CLUSTER_NAME: aks-demo-cluster
  AKS_RESOURCE_GROUP: rg-acr-demo
  APP_NAME: nextjsbasicapp  # ‚Üê Updated app name

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: üîç Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./

      - name: üê≥ Build Docker image
        run: docker build -t ${{ env.APP_NAME }}:latest .

      - name: üõ°Ô∏è Scan container vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.APP_NAME }}:latest'
          format: 'table'

  deploy:
    needs: security-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: nextjsbasicapp
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: üîê Login to Azure
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: üê≥ Build and push to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }} .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}

      - name: üîß Install kubelogin
        run: |
          # Download and install kubelogin
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.32/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          chmod +x /usr/local/bin/kubelogin

      - name: üéØ Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: üöÄ Deploy to AKS
        run: |
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml
          kubectl apply -f k8s/ --validate=false
          kubectl rollout status deployment/${{ env.APP_NAME }}
